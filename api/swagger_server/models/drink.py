# coding: utf-8

from __future__ import absolute_import

from typing import Dict, List  # noqa: F401
from datetime import date, datetime  # noqa: F401

from swagger_server import util
from swagger_server.models.base_model_ import Model


class Drink(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self, name: str = None, size: str = None, iced: bool = None
    ):  # noqa: E501
        """Drink - a model defined in Swagger

        :param name: The name of this Drink.  # noqa: E501
        :type name: str
        :param size: The size of this Drink.  # noqa: E501
        :type size: str
        :param iced: The iced of this Drink.  # noqa: E501
        :type iced: bool
        """
        self.swagger_types = {"name": str, "size": str, "iced": bool}

        self.attribute_map = {"name": "name", "size": "size", "iced": "iced"}
        self._name = name
        self._size = size
        self._iced = iced

    @classmethod
    def from_dict(cls, dikt) -> "Drink":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The drink of this Drink.  # noqa: E501
        :rtype: Drink
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Drink.

        the name of the drink  # noqa: E501

        :return: The name of this Drink.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Drink.

        the name of the drink  # noqa: E501

        :param name: The name of this Drink.
        :type name: str
        """

        self._name = name

    @property
    def size(self) -> str:
        """Gets the size of this Drink.

        The size  # noqa: E501

        :return: The size of this Drink.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: str):
        """Sets the size of this Drink.

        The size  # noqa: E501

        :param size: The size of this Drink.
        :type size: str
        """

        self._size = size

    @property
    def iced(self) -> bool:
        """Gets the iced of this Drink.

        Is it iced?  # noqa: E501

        :return: The iced of this Drink.
        :rtype: bool
        """
        return self._iced

    @iced.setter
    def iced(self, iced: bool):
        """Sets the iced of this Drink.

        Is it iced?  # noqa: E501

        :param iced: The iced of this Drink.
        :type iced: bool
        """

        self._iced = iced
