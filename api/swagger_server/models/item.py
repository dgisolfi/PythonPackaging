# coding: utf-8

from __future__ import absolute_import

from typing import Dict, List  # noqa: F401
from datetime import date, datetime  # noqa: F401

from swagger_server import util
from swagger_server.models.base_model_ import Model


class Item(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        name: str = None,
        size: List[str] = None,
        calories: int = None,
        price: List[float] = None,
    ):  # noqa: E501
        """Item - a model defined in Swagger

        :param name: The name of this Item.  # noqa: E501
        :type name: str
        :param size: The size of this Item.  # noqa: E501
        :type size: List[str]
        :param calories: The calories of this Item.  # noqa: E501
        :type calories: int
        :param price: The price of this Item.  # noqa: E501
        :type price: List[float]
        """
        self.swagger_types = {
            "name": str,
            "size": List[str],
            "calories": int,
            "price": List[float],
        }

        self.attribute_map = {
            "name": "name",
            "size": "size",
            "calories": "calories",
            "price": "price",
        }
        self._name = name
        self._size = size
        self._calories = calories
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> "Item":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The item of this Item.  # noqa: E501
        :rtype: Item
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Item.

        the name of the drink  # noqa: E501

        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Item.

        the name of the drink  # noqa: E501

        :param name: The name of this Item.
        :type name: str
        """

        self._name = name

    @property
    def size(self) -> List[str]:
        """Gets the size of this Item.

        The available sizes of a beverage  # noqa: E501

        :return: The size of this Item.
        :rtype: List[str]
        """
        return self._size

    @size.setter
    def size(self, size: List[str]):
        """Sets the size of this Item.

        The available sizes of a beverage  # noqa: E501

        :param size: The size of this Item.
        :type size: List[str]
        """

        self._size = size

    @property
    def calories(self) -> int:
        """Gets the calories of this Item.

        The total calories of a drink  # noqa: E501

        :return: The calories of this Item.
        :rtype: int
        """
        return self._calories

    @calories.setter
    def calories(self, calories: int):
        """Sets the calories of this Item.

        The total calories of a drink  # noqa: E501

        :param calories: The calories of this Item.
        :type calories: int
        """

        self._calories = calories

    @property
    def price(self) -> List[float]:
        """Gets the price of this Item.

        A list of prices associated with sizes  # noqa: E501

        :return: The price of this Item.
        :rtype: List[float]
        """
        return self._price

    @price.setter
    def price(self, price: List[float]):
        """Sets the price of this Item.

        A list of prices associated with sizes  # noqa: E501

        :param price: The price of this Item.
        :type price: List[float]
        """

        self._price = price
